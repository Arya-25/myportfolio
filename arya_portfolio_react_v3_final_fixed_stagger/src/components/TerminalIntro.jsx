import React, { useEffect, useRef, useState } from 'react'
const lines=["Initializing CyberDeck v3.0...","Loading kernel modules [OK]","Mounting secure containers...","Probing network interfaces...","Establishing secure tunnel...","Authenticating user: ARYA...","Welcome, ARYA MANGESH DESHPANDE","Launching portfolio..."]
function MatrixRain(){const ref=useRef(null);useEffect(()=>{const c=ref.current;if(!c) return;const x=c.getContext('2d');let w=c.width=c.offsetWidth;let h=c.height=c.offsetHeight;const cols=Math.floor(w/14);const ypos=Array(cols).fill(0);let raf=null;function step(){x.fillStyle='rgba(0,0,0,0.05)';x.fillRect(0,0,w,h);x.fillStyle='#00ffb1';x.font='13px monospace';ypos.forEach((y,i)=>{const t=String.fromCharCode(33+Math.random()*94);const X=i*14;x.fillText(t,X,y);ypos[i]=(y>100+Math.random()*1000)?0:y+14});raf=requestAnimationFrame(step)}step();const onR=()=>{w=c.width=c.offsetWidth;h=c.height=c.offsetHeight};window.addEventListener('resize',onR);return()=>{cancelAnimationFrame(raf);window.removeEventListener('resize',onR)}},[]);return <canvas ref={ref} className="matrix"/>}
export default function TerminalIntro({onFinish}){const[shown,setShown]=useState([]);const[done,setDone]=useState(false);useEffect(()=>{let i=0;function next(){if(i>=lines.length){setDone(true);setTimeout(()=>onFinish&&onFinish(),700);return}setShown(p=>[...p,lines[i]]);i++;setTimeout(next,500+Math.random()*600)}const t=setTimeout(next,300);return()=>clearTimeout(t)},[onFinish]);return(<div className="terminal-wrap"><div className="terminal"><div className="console-top"><div className="console-dots"><div className="dot red"/><div className="dot yellow"/><div className="dot green"/></div><div className="ml-auto text-xs text-gray-400 console">boot sequence</div></div><div className="console-body console"><MatrixRain/>{shown.map((l,i)=>(<div key={i} style={{whiteSpace:'pre'}}>&gt; {l}</div>))}{!done&&<div>&gt; _</div>}</div></div></div>)}